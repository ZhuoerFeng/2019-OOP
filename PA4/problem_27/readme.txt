设计思想：
Node类：基类， 多态支持两种数据类型int bool，定位enum
Operator类：操作符节点类，定义6 + 3 + 1 + 1个操作符
    操作符的优先级通过静态成员函数priority实现

main函数中具体的实现为构建语法分析树
    首先读入命令一行一行读，随后将其通过stringstream转化为输入语法分析树的表达式“节点”序列
    语法分析树核心维护一个操作符stack opt和数值stack h。注意到传入命令中有变量，我们在全局开一个var的map，用来建立变量名和具体的node之间的关系
    处理优先级：
        压栈：如果接下来的操作符优先级最高，则直接入栈。如果优先级并不是最高，则while (!opts.empty() && opts.top()->priority() <= cur->priority())取到该位置
             每弹出一个操作符立刻对其进行计算，具体就是在这个操作符所对应的operend的数量从stack h中取出，计算出结果后作为一个新的变量压入h
    计算：
        为了面向对象，在FOP计算表达式的值是，我们将该过程安排为每个operator类的成员虚函数。这样做的好处可以避免大量的if语句块，而是特异性的针对每个对象进行操作。
        也就是说，operator现在是一个计算工具，并没有独立的变量意义，这也符合其作为表达式中的操作符的意义。
